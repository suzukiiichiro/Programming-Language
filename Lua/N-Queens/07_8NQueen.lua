#!/usr/bin/env luajit

--[[
/**
 * Luaで学ぶアルゴリズムとデータ構造  
 * ステップバイステップでＮ−クイーン問題を最適化
 * 一般社団法人  共同通信社  情報技術局  鈴木  維一郎(suzuki.iichiro@kyodonews.jp)
 * 
 # Java/C/Lua/Bash版
 # https://github.com/suzukiiichiro/N-Queen
 * 
 * https://ja.wikipedia.org/wiki/エイト・クイーン
 *
 * N-Queens問題とは
 *    Nクイーン問題とは、「8列×8行のチェスボードに8個のクイーンを、互いに効きが
 *    当たらないように並べよ」という８クイーン問題のクイーン(N)を、どこまで大き
 *    なNまで解を求めることができるかという問題。
 *    クイーンとは、チェスで使われているクイーンを指し、チェス盤の中で、縦、横、
 *    斜めにどこまでも進むことができる駒で、日本の将棋でいう「飛車と角」を合わ
 *    せた動きとなる。８列×８行で構成される一般的なチェスボードにおける8-Queens
 *    問題の解は、解の総数は92個である。比較的単純な問題なので、学部レベルの演
 *    習問題として取り上げられることが多い。
 *    8-Queens問題程度であれば、人力またはプログラムによる「力まかせ探索」でも
 *    解を求めることができるが、Nが大きくなると解が一気に爆発し、実用的な時間で
 *    は解けなくなる。
 *    現在すべての解が判明しているものは、2004年に電気通信大学で264CPU×20日をか
 *    けてn=24を解決し世界一に、その後2005 年にニッツァ大学でn=25、2016年にドレ
 *    スデン工科大学でn=27の解を求めることに成功している。
 *
 * 目次
 *  Nクイーン問題
 *  １．ブルートフォース（力まかせ探索） NQueen1() 
 *  ２．配置フラグ（制約テスト高速化）   NQueen3()
 *  ３．バックトラック                   NQueen2()
 *  ４．対称解除法(回転と斜軸）          NQueen4()
 *  ５．枝刈りと最適化                   NQueen5()
 *  ６．スレッド                         NQueen6()
 *  ７．ビットマップ                     NQueen7()
 *<>８．マルチスレッド                   NQueen8()
 *
 *
 *   ８．マルチスレッド
 * 
 * ここまでの処理は、一つのスレッドが順番にＡ行の１列目から順を追って処理判定をし
 * てきました。この節では、Ａ行の列それぞれに別々のスレッドを割り当て、全てのス
 * レッドを同時に処理判定させます。Ａ行それぞれの列の処理判定結果はBoardクラスで
 * 管理し、処理完了とともに結果を出力します。スレッドはWorkEngineクラスがNの数だ
 * け生成されます。WorkEngineクラスは自身の持ち場のＡ行＊列の処理だけを担当しま
 * す。これらはマルチスレッド処理と言い、並列処理のための同期、排他、ロック、集計
 * など複雑な処理を理解する知識が必要です。そして処理の最後に合計値を算出する方法
 * をマルチスレッド処理と言います。
 * １Ｘ１，２Ｘ２，３Ｘ３，４Ｘ４，５Ｘ５，６Ｘ６，７ｘ７、８Ｘ８のボートごとの計
 * 算をスレッドに割り当てる手法がちまたでは多く見受けられます。これらの手法は、
 * 実装は簡単ですが、Ｎが７の計算をしながら別スレッドでＮが８の計算を並列処理する
 * といった矛盾が原因で、Ｎが大きくなるとむしろ処理時間がかかります。
 *   ここでは理想的なアルゴリズムとして前者の手法でプログラミングします。
 */

  /**
   実行結果 Java版
   N:            Total       Unique    hh:mm:ss
   2:                0            0  00:00:00
   3:                0            0  00:00:00
   4:                2            1  00:00:00
   5:               10            2  00:00:00
   6:                4            1  00:00:00
   7:               40            6  00:00:00
   8:               92           12  00:00:00
   9:              352           46  00:00:00
  10:              724           92  00:00:00
  11:             2680          341  00:00:00
  12:            14200         1787  00:00:00
  13:            73712         9233  00:00:00
  14:           365596        45752  00:00:00
  15:          2279184       285053  00:00:00
  16:         14772512      1846955  00:00:00
  17:         95815104     11977939  00:00:04
  18:        666090624     83263591  00:00:34
  19:       4968057848    621012754  00:04:18
  20:      39029188884   4878666808  00:35:07
  21:     314666222712  39333324973  04:41:36
  22:    2691008701644 336376244042  39:14:59
   */
]]--
--[[
-- lua lanesのインストール
-- luajitでは動かない。luaに戻す
-- macデフォルトのluaをアンインストール
-- sudo port uninstall lua 
-- $ brew [install/upgrade] lua
-- $ brew install lurrocks
-- $ luarocks install lanes
-- ~/.bash_profileにPATHを通す
-- $ vim ~/.bash_profile
-- export LUA_PATH='/usr/local/share/lua/5.2/lanes_3_10_1_1-lanes.lua;;'
-- export LUA_CPATH='/usr/local/lib/lua/5.2/lanes_3_10_1_1-lanes/core.so;;'
--]]

--lanes = require "lanes".configure()

-- マルチスレッドは現在開発進行中です。。。すんません。
--
