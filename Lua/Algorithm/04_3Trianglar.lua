#!/bin/lua

--[[#
####################
# 再帰-三角数(Triangular numbers）
# この数列の任意のn番目の項の値を見つけたいのですが、どうしたら見つかるでしょうか。
# ４番目の光波いくつでしょう（それは１０でした）
# どんな計算をしたらその１０という値は求まるのでしょうか。
# 項の値は、図の各行の四角形の数を単純に足していけば求まるように見えますね。
# 三角数列の４番目の校では、最初の桁に小さな四角形が４つあり、次が３つ、その次が２つという具合ですから、
# 全部を足せば 4+3+2+1=10となります。
# 
# 異なるアプローチ
# na番目の項の値は、前数列の和ではなく、たった２つのものの和であると考えます。
# 
# １．最初の桁、その数はn
# ２．そのほかの桁全ての和
#
# 項nの場合の「残りの桁」の和は、項n-1の場合の全ての桁の和と同じです。
# ですから、項nの全ての桁の和を求めるメソッドがあれば、
# そのメソッドをn-1という引数で呼び出せば、項nの場合の「残りの桁」の和は求まるはずです。
# こうした無限の責任転嫁を防ぐために n==1 の場合、自力で答えは１であるという言えなくてはなりません。
# これを基底条件といいます。どんな再帰メソッドにも基底条件がある事が絶対的に必要です。
#
# 計算式で解を得る場合
# n番目の三角数＝(n^2+n)/2
#
####################
#
#  □
#  #1=1
#
#  □
#  □□
#  #2=3
#
#  □
#  □□
#  □□□
#  #3=6
#
#  □
#  □□
#  □□□
#  □□□□
#  #4=10
#
#  □
#  □□
#  □□□
#  □□□□
#  □□□□□
#  #5=15
#
#  □
#  □□
#  □□□
#  □□□□
#  □□□□□
#  □□□□□□
#  #6=21
#
#  □
#  □□
#  □□□
#  □□□□
#  □□□□□
#  □□□□□□
#  □□□□□□□
#  #7=28
#
# #64=　？
##
#
]]--
Triangle={};Triangle.new=function()
  local this={};
  function Triangle:triangle(n)
    if n==1 then
      return 1;
    else
      return n+self:triangle(n-1);
    end 
  end
  return setmetatable(this,{__index=Triangle});
end

s=os.clock();
print(Triangle.new():triangle(64));
print(os.clock()-s);

